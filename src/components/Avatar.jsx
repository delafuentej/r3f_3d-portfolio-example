/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/Me2.glb -o src/components/Avatar.jsx -k -r public 
*/

// animation: https://www.mixamo.com/#/

import React, { useRef, useEffect, useState } from "react";
import * as THREE from "three";
import { useGraph, useFrame } from "@react-three/fiber";
import { useGLTF, useFBX, useAnimations, useScroll } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { useMobile } from "../hooks/useMobile";

export function Avatar(props) {
  const { isMobile } = useMobile();

  const { scene } = useGLTF("/models/Me2.glb");
  const idle = useFBX("/animations/Idle.fbx");
  const walking = useFBX("/animations/Walking.fbx");
  const greeting = useFBX("/animations/Greeting.fbx");
  const dancing = useFBX("/animations/Dancing.fbx");
  const stop = useFBX("/animations/Stop Walking.fbx");

  idle.animations[0].name = "Idle";
  walking.animations[0].name = "Walking";
  greeting.animations[0].name = "Greeting";
  dancing.animations[0].name = "Dancing";
  stop.animations[0].name = "Stop Walking";
  //ref
  console.log("walking", greeting);
  const group = useRef();

  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  const { actions } = useAnimations(
    [
      ...idle.animations,
      ...walking.animations,
      ...greeting.animations,
      ...dancing.animations,
      ...stop.animations,
    ],
    group
  );

  // const { actions } = useAnimations(
  //   [idle[0], walking[0], greeting[0], dancing[0], stop[0]],
  //   group
  // );
  const [animation, setAnimation] = useState("Idle");

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => actions[animation].fadeOut(0.5);
  }, [animation]);

  const scrollData = useScroll();
  const lastScroll = useRef(0);

  useFrame(() => {
    // useFrame, we can check if the scroll position has changed and set the animation accordingly:
    const scrollDelta = scrollData.offset - lastScroll.current;

    let rotationTarget = 0;

    if (Math.abs(scrollDelta) > 0.00001) {
      setAnimation("Walking");
      if (scrollDelta > 0) {
        rotationTarget = isMobile ? Math.PI / 2 : 0;
      } else {
        rotationTarget = isMobile ? -Math.PI / 2 : Math.PI;
      }
    } else {
      setAnimation("Idle");
    }
    //We look at the scrollDelta to determine the scroll direction and set the rotationTarget accordingly.
    group.current.rotation.y = THREE.MathUtils.lerp(
      group.current.rotation.y,
      rotationTarget,
      0.1
    );
    lastScroll.current = scrollData.offset;
  }, []);

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="Wolf3D_Hair"
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Glasses"
        geometry={nodes.Wolf3D_Glasses.geometry}
        material={materials.Wolf3D_Glasses}
        skeleton={nodes.Wolf3D_Glasses.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Top"
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Bottom"
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Footwear"
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Body"
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/models/Me2.glb");

useFBX.preload("/animations/Idle.fbx");
useFBX.preload("/animations/Walking.fbx");
useFBX.preload("/animations/Greeting.fbx");
useFBX.preload("/animations/Dancing.fbx");
useFBX.preload("/animations/Stop Walking.fbx");
